#!/usr/bin/env python3
"""Generate a reference and some noisy reads

Generates two FASTA files:
    1. A reference file (default name reference.fasta)
    2. A reads file (default name reads.fasta)

Example usage:
    genome_simulator --reference_length 2700000 --num_reads 54000 --median_read_length=10000
"""

from __future__ import print_function
from __future__ import division

import argparse
import random

from genomeworks import simulators
from genomeworks.io import fastaio
from genomeworks.simulators import genomesim
from genomeworks.simulators import readsim


def main():
    parser = argparse.ArgumentParser(description="Create a reference and some reads")

    parser.add_argument('--reference_length',
                        type=int,
                        default=int(1e6))
    parser.add_argument('--reference_filepath',
                        type=str,
                        default='ref.fasta')
    parser.add_argument('--reads_filepath',
                        type=str,
                        default='reads.fasta')
    parser.add_argument('--random_seed',
                        type=int,
                        default=0)
    parser.add_argument('--median_read_length',
                        type=int,
                        default=10000)
    parser.add_argument('--snp_error_rate',
                        type=float,
                        default=0.025)
    parser.add_argument('--insertion_error_rate',
                        type=float,
                        default=0.0125)
    parser.add_argument('--deletion_error_rate',
                        type=float,
                        default=0.0125)
    parser.add_argument('--num_reads',
                        type=int,
                        default=100)
    args = parser.parse_args()

    random.seed(args.random_seed)

    genome_simulator = genomesim.MarkovGenomeSimulator()

    reference_string = genome_simulator.build_reference(args.reference_length,
                                                        transitions=simulators.HIGH_GC_HOMOPOLYMERIC_TRANSITIONS)

    reference = [('Reference', reference_string)]

    read_generator = readsim.NoisyReadSimulator()

    reads = []
    for read_id in range(args.num_reads):
        read = read_generator.generate_read(reference_string,
                                            args.median_read_length,
                                            snv_error_rate=args.snv_error_rate,
                                            insertion_error_rate=args.insertion_error_rate,
                                            deletion_error_rate=args.deletion_error_rate)
        reads.append(("read_" + str(read_id), read))

    # Write the reference
    fastaio.write_fasta(reference, args.reference_filepath)
    # Write the reads
    fastaio.write_fasta(reads, args.reads_filepath)


if __name__ == '__main__':
    main()
